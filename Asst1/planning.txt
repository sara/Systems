Stuff to ask:
	- what file to define mymalloc and myfree as malloc and free
	- error codes?



User errors to catch:
	- freeing addresses that are not pointers
	- freeing pointers not allocated by malloc
	- freeing same pointer multiple times
	- asking for more memory than exists

enum BOOLEAN = {TRUE, FALSE};




Step 1: Define malloc and free to be mymalloc and myfree
	ASK FRANCISCO WHAT FILE TO DO THIS IN. DON'T FORGET DUMBASS.

Step 2: myMalloc
	0. keep two bytes at front of array to indicate total # of free bytes 
	   remaining
	1. use checkContiguous to verify that there's still sufficient memory available
		- must have two bytes for metadata and n bytes for amount
		requested
			- if not enough space, attempt to defrag
				- if defrag "fails" i.e. array still cannot accomodate given amount of memory, return an error (may have unique error code)
	2. if success, set first index of sufficiently large block to # of bytes +1 if even,


checkContiguous (char [], int numberOfBytes//n + 2 for metadata)
	- set up pointer to traverse array
		- check meta data, skip ahead by n (don't need to do n+1 because memory can only be allocated evenly, and the +1 indicates the space is full; i.e. moving ahead by n should lead you to either next entry or first empty spot)
	- continue process until encounter even >= target or end of array
		- if success, return index number; else return -1




